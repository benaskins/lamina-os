#!/bin/bash

# üúÑ Lamina Environment Manager
# Unified CLI for managing development and production environments
# Usage: lamina-env [dev|prod] [start|stop|status|shell|logs]

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
DEV_COLIMA="default"
PROD_COLIMA="production"
K3S_DATA_DIR="/opt/lamina/k3s"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

show_usage() {
    cat << EOF
üúÑ Lamina Environment Manager

USAGE:
    lamina-env <environment> <command>

ENVIRONMENTS:
    dev         Development environment (Colima + containers)
    prod        Production environment (Colima + native k3s)

COMMANDS:
    start       Start the environment
    stop        Stop the environment  
    status      Show environment status
    shell       Open shell in environment
    logs        Show environment logs
    ui          Open monitoring UIs
    deploy      Deploy Lamina services
    models      Manage AI models
    reset       Reset environment to clean state

EXAMPLES:
    lamina-env dev start          # Start development environment
    lamina-env prod start         # Start production environment  
    lamina-env prod status        # Check production status
    lamina-env prod ui            # Open production monitoring UIs
    lamina-env dev deploy         # Deploy to development
    lamina-env prod models list   # List production models

QUICK COMMANDS:
    lamina-env start-all          # Start both environments
    lamina-env stop-all           # Stop both environments
    lamina-env switch dev         # Switch kubectl context to dev
    lamina-env switch prod        # Switch kubectl context to prod
EOF
}

get_colima_status() {
    local profile=$1
    # Use colima list to get reliable status information
    local list_output=$(colima list 2>/dev/null)
    
    # Debug: show what we're checking
    # echo "DEBUG: Checking profile '$profile'" >&2
    # echo "DEBUG: List output:" >&2
    # echo "$list_output" >&2
    
    if echo "$list_output" | grep -q "^$profile.*Running"; then
        echo "running"
    elif echo "$list_output" | grep -q "^$profile.*Stopped"; then
        echo "stopped"
    else
        echo "not_found"
    fi
}

get_k3s_status() {
    if pgrep k3s > /dev/null; then
        echo "running"
    else
        echo "stopped"
    fi
}

start_dev_environment() {
    log "Starting development environment..."
    
    # Start default Colima if not running
    if [[ "$(get_colima_status $DEV_COLIMA)" != "running" ]]; then
        log "Starting Colima development profile..."
        colima start -p $DEV_COLIMA --cpu 8 --memory 32 --disk 200
    fi
    
    # Set DOCKER_HOST to use the right profile
    export DOCKER_HOST="unix://$HOME/.colima/$DEV_COLIMA/docker.sock"
    
    # Check if k3d cluster exists
    if ! k3d cluster list | grep -q "lamina-development"; then
        log "Creating k3d development cluster..."
        k3d cluster create lamina-development \
            --servers 1 \
            --agents 1 \
            --port "8081:80@loadbalancer" \
            --port "3001:3000@loadbalancer" \
            --volume "/tmp/k3d-dev-models:/models@all"
    else
        log "Starting existing k3d development cluster..."
        k3d cluster start lamina-development
    fi
    
    # Set kubectl context
    kubectl config use-context k3d-lamina-development
    
    success "Development environment ready!"
    success "kubectl context: k3d-lamina-development"
    success "Grafana: http://localhost:3001 (when deployed)"
}

start_prod_environment() {
    log "Starting production environment..."
    
    # Start production Colima with more resources
    if [[ "$(get_colima_status $PROD_COLIMA)" != "running" ]]; then
        log "Starting Colima production profile..."
        # Check if config file exists
        if [[ -f "$SCRIPT_DIR/colima-production.yaml" ]]; then
            colima start -p $PROD_COLIMA --config "$SCRIPT_DIR/colima-production.yaml"
        else
            # Fallback to command line options
            colima start -p $PROD_COLIMA --cpu 16 --memory 256 --disk 500 --mount-type=virtiofs
        fi
    fi
    
    # Set DOCKER_HOST to use production profile  
    export DOCKER_HOST="unix://$HOME/.colima/$PROD_COLIMA/docker.sock"
    
    # Check if we need to install k3s in the VM
    log "Setting up native k3s in production VM..."
    
    # Create k3s installation script for the VM
    cat > /tmp/install-k3s-vm.sh << 'EOF'
#!/bin/bash
set -euo pipefail

# Check if k3s is already installed
if command -v k3s &> /dev/null; then
    echo "k3s already installed"
    if pgrep k3s > /dev/null; then
        echo "k3s already running"
        exit 0
    else
        echo "Starting existing k3s..."
        sudo k3s server \
            --disable=traefik \
            --disable=servicelb \
            --cluster-cidr=10.42.0.0/16 \
            --service-cidr=10.43.0.0/16 \
            --kubelet-arg="--max-pods=200" \
            --kubelet-arg="--kube-reserved=cpu=2000m,memory=8Gi" \
            --kubelet-arg="--system-reserved=cpu=1000m,memory=4Gi" &
        exit 0
    fi
fi

# Install k3s
echo "Installing k3s..."
curl -sfL https://get.k3s.io | sh -s - server \
    --disable=traefik \
    --disable=servicelb \
    --cluster-cidr=10.42.0.0/16 \
    --service-cidr=10.43.0.0/16 \
    --kubelet-arg="--max-pods=200" \
    --kubelet-arg="--kube-reserved=cpu=2000m,memory=8Gi" \
    --kubelet-arg="--system-reserved=cpu=1000m,memory=4Gi"

echo "k3s installation complete"
EOF

    # Copy and execute in VM
    colima ssh -p $PROD_COLIMA -- sudo mkdir -p /opt/lamina
    colima ssh -p $PROD_COLIMA -- bash < /tmp/install-k3s-vm.sh
    
    # Wait for k3s to be ready and create kubeconfig
    log "Waiting for k3s to be ready..."
    sleep 10
    
    # Copy kubeconfig from VM
    log "Configuring kubectl for production..."
    mkdir -p ~/.kube
    
    # Check if k3s.yaml exists before trying to read it
    if colima ssh -p $PROD_COLIMA -- sudo test -f /etc/rancher/k3s/k3s.yaml; then
        colima ssh -p $PROD_COLIMA -- sudo cat /etc/rancher/k3s/k3s.yaml | \
            sed 's/127.0.0.1/127.0.0.1/' > ~/.kube/config-prod
    else
        error "k3s kubeconfig not found. k3s may still be starting up."
    fi
    
    # Merge kubeconfig
    KUBECONFIG=~/.kube/config:~/.kube/config-prod kubectl config view --flatten > ~/.kube/config-merged
    mv ~/.kube/config-merged ~/.kube/config
    
    # Set production context
    kubectl config use-context default
    kubectl config rename-context default lamina-production
    kubectl config use-context lamina-production
    
    success "Production environment ready!"
    success "kubectl context: lamina-production"  
    success "Performance: Native k3s (maximum speed)"
}

stop_environment() {
    local env=$1
    
    if [[ "$env" == "dev" ]]; then
        log "Stopping development environment..."
        k3d cluster stop lamina-development 2>/dev/null || true
        # Keep Colima running for other development work
        success "Development environment stopped"
        
    elif [[ "$env" == "prod" ]]; then
        log "Stopping production environment..."
        colima ssh -p $PROD_COLIMA -- "sudo pkill k3s" 2>/dev/null || true
        colima stop -p $PROD_COLIMA
        success "Production environment stopped"
    fi
}

show_status() {
    local env=$1
    
    echo -e "${PURPLE}üúÑ Lamina Environment Status${NC}"
    echo "================================"
    
    if [[ "$env" == "dev" || "$env" == "all" ]]; then
        echo -e "${BLUE}Development Environment:${NC}"
        
        local colima_status=$(get_colima_status $DEV_COLIMA)
        echo "  Colima ($DEV_COLIMA): $colima_status"
        
        # Set correct Docker context for k3d detection
        export DOCKER_HOST="unix://$HOME/.colima/$DEV_COLIMA/docker.sock"
        if docker ps --filter "name=k3d-lamina-development" --format "{{.Names}}" | grep -q "k3d-lamina-development"; then
            echo "  k3d cluster: running"
            echo "  Nodes: $(kubectl --context=k3d-lamina-development get nodes --no-headers 2>/dev/null | wc -l || echo "0")"
        else
            echo "  k3d cluster: stopped"
        fi
        echo ""
    fi
    
    if [[ "$env" == "prod" || "$env" == "all" ]]; then
        echo -e "${BLUE}Production Environment:${NC}"
        
        local colima_status=$(get_colima_status $PROD_COLIMA)
        echo "  Colima ($PROD_COLIMA): $colima_status"
        
        if [[ "$colima_status" == "running" ]]; then
            local k3s_status="stopped"
            if colima ssh -p $PROD_COLIMA -- "pgrep k3s" &>/dev/null; then
                k3s_status="running"
            fi
            echo "  k3s server: $k3s_status"
            
            if [[ "$k3s_status" == "running" ]]; then
                echo "  Nodes: $(kubectl --context=lamina-production get nodes --no-headers 2>/dev/null | wc -l || echo "0")"
            fi
        else
            echo "  k3s server: stopped (Colima not running)"
        fi
        echo ""
    fi
}

open_monitoring_uis() {
    local env=$1
    
    if [[ "$env" == "dev" ]]; then
        log "Opening development monitoring UIs..."
        # Access via NodePort services (configured in Helm chart)
        log "Grafana: Access via docker port mapping or direct cluster access"
        log "Prometheus: Access via docker port mapping or direct cluster access"
        
        # Provide port-forward as backup
        kubectl --context=k3d-lamina-development port-forward -n monitoring svc/grafana 3001:3000 </dev/null >/dev/null 2>&1 &
        kubectl --context=k3d-lamina-development port-forward -n monitoring svc/prometheus 9091:9090 </dev/null >/dev/null 2>&1 &
        
    elif [[ "$env" == "prod" ]]; then
        log "Opening production monitoring UIs..."
        kubectl --context=lamina-production port-forward -n monitoring svc/grafana 3000:3000 &
        kubectl --context=lamina-production port-forward -n monitoring svc/prometheus-server 9090:9090 &
        
        # Also forward ArgoCD for GitOps
        kubectl --context=lamina-production port-forward -n argocd svc/argocd-server 8080:443 &
    fi
    
    sleep 3
    success "Opening monitoring dashboards..."
    if [[ "$env" == "dev" ]]; then
        open "http://localhost:3001" 2>/dev/null || echo "Grafana: http://localhost:3001"
        open "http://localhost:9091" 2>/dev/null || echo "Prometheus: http://localhost:9091"
    else
        open "http://localhost:3000" 2>/dev/null || echo "Grafana: http://localhost:3000"
        open "http://localhost:9090" 2>/dev/null || echo "Prometheus: http://localhost:9090"
    fi
    
    if [[ "$env" == "prod" ]]; then
        open "https://localhost:8080" 2>/dev/null || echo "ArgoCD: https://localhost:8080"
    fi
}

switch_context() {
    local env=$1
    
    if [[ "$env" == "dev" ]]; then
        kubectl config use-context k3d-lamina-development
        success "Switched to development context"
        
    elif [[ "$env" == "prod" ]]; then
        kubectl config use-context lamina-production  
        success "Switched to production context"
    fi
    
    log "Current context: $(kubectl config current-context)"
}

# Main command processing
case "${1:-}" in
    "dev"|"development")
        case "${2:-}" in
            "start") start_dev_environment ;;
            "stop") stop_environment "dev" ;;
            "status") show_status "dev" ;;
            "ui") open_monitoring_uis "dev" ;;
            "shell") colima ssh -p $DEV_COLIMA ;;
            "logs") kubectl --context=k3d-lamina-development logs -f -l app.kubernetes.io/part-of=lamina ;;
            *) error "Unknown dev command: ${2:-}. Use: start, stop, status, ui, shell, logs" ;;
        esac
        ;;
        
    "prod"|"production")
        case "${2:-}" in
            "start") start_prod_environment ;;
            "stop") stop_environment "prod" ;;
            "status") show_status "prod" ;;
            "ui") open_monitoring_uis "prod" ;;
            "shell") colima ssh -p $PROD_COLIMA ;;
            "logs") kubectl --context=lamina-production logs -f -l app.kubernetes.io/part-of=lamina ;;
            *) error "Unknown prod command: ${2:-}. Use: start, stop, status, ui, shell, logs" ;;
        esac
        ;;
        
    "start-all")
        start_dev_environment
        start_prod_environment
        ;;
        
    "stop-all")
        stop_environment "dev"
        stop_environment "prod"
        ;;
        
    "status")
        show_status "all"
        ;;
        
    "switch")
        switch_context "${2:-}"
        ;;
        
    "help"|"--help"|"-h"|"")
        show_usage
        ;;
        
    *)
        error "Unknown command: $1. Use 'lamina-env help' for usage."
        ;;
esac