name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        test-tier: ["unit", "integration"]
        exclude:
          # Only run integration tests on Python 3.12 (most common)
          - python-version: "3.11"
            test-tier: "integration"
          - python-version: "3.13"
            test-tier: "integration"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Auto-fix linting and formatting with ruff
      if: matrix.test-tier == 'unit' && matrix.python-version == '3.12'
      run: |
        uv run ruff check --fix
        uv run ruff format
    
    - name: Commit auto-fixes back to branch
      if: matrix.test-tier == 'unit' && matrix.python-version == '3.12'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        if ! git diff --cached --quiet; then
          git commit -m "auto-fix: apply ruff formatting and linting fixes

          ðŸ¤– Auto-applied by CI

          Co-Authored-By: GitHub Actions <action@github.com>"
          git push
        fi
    
    - name: Verify linting after auto-fix
      if: matrix.test-tier == 'unit'
      run: |
        uv run ruff check
        uv run ruff format --check
    
    # Security check removed - now handled by dedicated security workflow
    
    # Unit Tests (Fast)
    - name: Run unit tests
      if: matrix.test-tier == 'unit'
      run: uv run pytest packages/lamina-core/tests/ --cov=packages --cov-report=xml -v
    
    # Integration Tests (Real AI)
    - name: Set up lamina-llm-serve for integration tests
      if: matrix.test-tier == 'integration' && matrix.python-version == '3.12'
      run: |
        # Use existing lamina-llm-serve from workspace
        cd packages/lamina-llm-serve
        uv sync
        
        # Download test model using lamina-llm-serve model manager
        uv run python scripts/model-manager.py download llama3.2-1b-q4_k_m --source huggingface || echo "Model download failed, tests may skip"
        
        # Verify model is available
        uv run python scripts/model-manager.py validate
        
        # Start server in background
        uv run python -m lamina_llm_serve.server --host 0.0.0.0 --port 8000 &
        sleep 15  # Wait for server startup
    
    - name: Run integration tests
      if: matrix.test-tier == 'integration' && matrix.python-version == '3.12'
      run: |
        cd packages/lamina-core
        uv sync --extra dev
        uv run pytest tests/ --integration -v --tb=short
    
    - name: Upload unit test coverage to Codecov
      if: matrix.test-tier == 'unit'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Build packages
      run: |
        cd packages/lamina-core
        uv build
        cd ../lamina-llm-serve  
        uv build
    
    - name: Verify imports work
      run: |
        uv run python -c "import lamina; print('âœ… lamina-core import successful')"
        cd packages/lamina-llm-serve && uv run python -c "import lamina_llm_serve; print('âœ… lamina-llm-serve import successful')"