# Workspace root configuration
# Individual packages are defined in packages/ subdirectories

[tool.uv.workspace]
members = ["packages/*"]

[tool.uv.sources]
# Local development dependencies between public packages only
lamina-core = { workspace = true }
lamina-llm-serve = { workspace = true }

[project]
name = "lamina-os-workspace"
version = "0.2.0"
description = "Workspace for Lamina OS packages"
requires-python = ">=3.11"
dependencies = [
    "lamina-core",
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
]

[project.optional-dependencies]
dev = [
    # Shared development dependencies across all packages
    "ruff>=0.8.0",
    "black>=24.10.0", 
    "isort>=5.13.0",
    "mypy>=1.13.0",
    "bandit>=1.8.0",
    "pre-commit>=4.0.0",
    
    # Testing framework
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",  # Parallel test execution
    
    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.27.0",
    
    # Development tools
    "jupyter>=1.1.1",
    "ipython>=8.30.0",
    "rich>=13.9.0",
]

# Public packages only - aurelia and lamina-lore remain private
all = [
    "lamina-core", 
    "lamina-llm-serve",
    "lamina-os-workspace[dev]"
]

[project.urls]
Homepage = "https://github.com/benaskins/lamina-os"
Documentation = "https://lamina-os.readthedocs.io"
Repository = "https://github.com/benaskins/lamina-os"
Issues = "https://github.com/benaskins/lamina-os/issues"
Changelog = "https://github.com/benaskins/lamina-os/blob/main/CHANGELOG.md"

[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # bandit security checks
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "B011"]
"examples/**/*" = ["S101", "S603"]
"scripts/**/*" = ["S603"]
"tools/**/*" = ["F841"]

[tool.black]
line-length = 100
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | packages/.*/\.venv
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["lamina", "lamina_llm_serve"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "lamina.*",
    "lamina_llm_serve.*",
    "transformers.*",
    "torch.*",
    "ollama.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["packages/*/tests", "tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["packages"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "test_*", "examples"]
skips = ["B101", "B601"]
